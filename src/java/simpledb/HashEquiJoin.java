package simpledb;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private boolean open = false;
    private Tuple curChild1 = null;
    private Tuple curChild2 = null;
    private TupleDesc jointTupleDesc;
    private ConcurrentHashMap<Field, LinkedList<Tuple>> field2TupleList = new ConcurrentHashMap<>();
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.jointTupleDesc = TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return this.jointTupleDesc;
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
        return child1.getTupleDesc().getFieldName(this.p.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return child2.getTupleDesc().getFieldName(this.p.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        this.open = true;
        child1.open();
        child2.open();
        super.open();
        buildMap();
    }

    public void close() {
        // some code goes here
        this.open = false;
        child1.close();
        child2.close();
        super.close();
        this.field2TupleList.clear();
        this.listIt = null;
        this.curChild1 = null;
        this.curChild2 = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        if (this.open){
            this.child1.rewind();
            this.child2.rewind();
            buildMap();
            this.listIt = null;
            this.curChild1 = null;
            this.curChild2 = null;
        }
        else
            throw new DbException("File is closed!");
    }

    private void buildMap() throws DbException, TransactionAbortedException {
        this.field2TupleList.clear();
        while (this.child1.hasNext()){
            Tuple curChild1 = this.child1.next();
            LinkedList<Tuple> equalList = field2TupleList.computeIfAbsent(curChild1.getField(this.p.getField1()), k->new LinkedList<>());
            equalList.add(curChild1);
        }
    }

    transient Iterator<Tuple> listIt = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (this.listIt != null && this.listIt.hasNext()) {
            this.curChild1 = this.listIt.next();
            return Tuple.joinTuples(this.curChild1, this.curChild2, this.jointTupleDesc);
        }
        while (this.child2.hasNext()) {
            this.curChild2 = this.child2.next();
            // get equal list of child1 with child2
            LinkedList<Tuple> equalList = this.field2TupleList.get(this.curChild2.getField(this.p.getField2()));
            if (equalList == null)
                continue;

            this.listIt = equalList.iterator();
            if (this.listIt.hasNext()) {
                this.curChild1 = this.listIt.next();
                return Tuple.joinTuples(this.curChild1, this.curChild2, this.jointTupleDesc);
            }
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        DbIterator[] children = {this.child1, this.child2};

        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
    }
    
}
